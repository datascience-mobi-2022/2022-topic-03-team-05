}
for (j in 3:23){
if(j != fraction_abs_max[i,1] && rep1ctrlnormDataframe[i,j] > 5 && rep1ctrlnormDataframe[i,j] > rep1ctrlnormDataframe[i, (j-1)] && rep1ctrlnormDataframe[i,j] > rep1ctrlnormDataframe[i, (j+1)] && rep1ctrlnormDataframe[i,j] > rep1ctrlnormDataframe[i, (j+2)] && rep1ctrlnormDataframe[i,j] > rep1ctrlnormDataframe[i, (j-2)]) {
maxctrl1_5[i,j] = j
}
if(j != fraction_abs_max[i,2] && rep2ctrlnormDataframe[i,j] > 5 && rep2ctrlnormDataframe[i,j] > rep2ctrlnormDataframe[i, (j-1)] && rep2ctrlnormDataframe[i,j] > rep2ctrlnormDataframe[i, (j+1)] && rep2ctrlnormDataframe[i,j] > rep2ctrlnormDataframe[i, (j+2)] && rep2ctrlnormDataframe[i,j] > rep2ctrlnormDataframe[i, (j-2)]){
maxctrl2_5[i,j] = j
}
if(j != fraction_abs_max[i,3] && rep3ctrlnormDataframe[i, j] > 5 &&  rep3ctrlnormDataframe[i,j] > rep3ctrlnormDataframe[i, (j-1)] && rep3ctrlnormDataframe[i,j] > rep3ctrlnormDataframe[i, (j+1)] && rep3ctrlnormDataframe[i,j] > rep3ctrlnormDataframe[i, (j+2)] && rep3ctrlnormDataframe[i,j] > rep3ctrlnormDataframe[i, (j-2)]) {
maxctrl3_5[i,j] = j
}
}
for(j in 24){ #marginal value 3
if(j != fraction_abs_max[i,1] && rep1ctrlnormDataframe[i,j] > 5 &&  rep1ctrlnormDataframe[i,j] > rep1ctrlnormDataframe[i, (j+1)] && rep1ctrlnormDataframe[i,j] > rep1ctrlnormDataframe[i, (j-1)] && rep1ctrlnormDataframe[i,j] > rep1ctrlnormDataframe[i, (j-2)]){
maxctrl1_5[i,j] = j
}
if(j != fraction_abs_max[i,2] && rep2ctrlnormDataframe[i,j] > 5 && rep2ctrlnormDataframe[i,j] > rep2ctrlnormDataframe[i, (j+1)] &&  rep2ctrlnormDataframe[i,j] > rep2ctrlnormDataframe[i, (j-1)] && rep2ctrlnormDataframe[i,j] > rep2ctrlnormDataframe[i, (j-2)]){
maxctrl2_5[i,j] = j
}
if(j != fraction_abs_max[i,3] && rep3ctrlnormDataframe[i,j] > 5 && rep3ctrlnormDataframe[i,j] > rep3ctrlnormDataframe[i, (j+1)] && rep3ctrlnormDataframe[i,j] > rep3ctrlnormDataframe[i, (j-1)] && rep3ctrlnormDataframe[i,j] > rep3ctrlnormDataframe[i, (j-2)]){
maxctrl3_5[i,j] = j
}
}
for (j in 25){ #marginal value 4
if(j != fraction_abs_max[i,1] && rep1ctrlnormDataframe[i,j] > 5 &&  rep1ctrlnormDataframe[i,j] > rep1ctrlnormDataframe[i, (j-1)]){
maxctrl1_5[i,j] = j
}
if(j != fraction_abs_max[i,2] && rep2ctrlnormDataframe[i,j] > 5 &&  rep2ctrlnormDataframe[i,j] > rep2ctrlnormDataframe[i, (j-1)]){
maxctrl2_5[i,j] = j
}
if(j != fraction_abs_max[i,3] && rep3ctrlnormDataframe[i,j] > 5 &&  rep3ctrlnormDataframe[i,j] > rep1ctrlnormDataframe[i, (j-1)]){
maxctrl3_5[i,j] = j
}
}
}
#rnase
maxrnase1_5 = matrix(0, nrow=nrow(rep1rnasenormDataframe), ncol=25)
maxrnase2_5 = matrix(0, nrow=nrow(rep1rnasenormDataframe), ncol=25)
maxrnase3_5 = matrix(0, nrow=nrow(rep1rnasenormDataframe), ncol=25)
for (i in 1:nrow(rep1rnasenormDataframe)){
for (j in 1){ #marginal value 1; weiterer threshold fÃ¼r Randwerte?
if(j != fraction_abs_max[i,4] && rep1rnasenormDataframe[i,j] > 5 &&  rep1rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j+1)]){
maxrnase1_5[i,j] = j
}
if(j != fraction_abs_max[i,5] && rep2rnasenormDataframe[i,j] > 5 &&  rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j+1)]){
maxrnase2_5[i,j] = j
}
if(j != fraction_abs_max[i,6] && rep3rnasenormDataframe[i,j] > 5 &&  rep3rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j+1)]){
maxrnase3_5[i,j] = j
}
}
for(j in 2){ #marginal value 2
if(j != fraction_abs_max[i,4] && rep1rnasenormDataframe[i,j] > 5 &&  rep1rnasenormDataframe[i,j] > rep1ctrlnormDataframe[i, (j-1)] && rep1ctrlnormDataframe[i,j] > rep1ctrlnormDataframe[i, (j+1)] && rep1rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j+2)]){
maxrnase1_5[i,j] = j
}
if(j != fraction_abs_max[i,5] && rep2rnasenormDataframe[i,j] > 5 && rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j-1)] &&  rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j+1)] && rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j+2)]){
maxrnase2_5[i,j] = j
}
if(j != fraction_abs_max[i,6] && rep3rnasenormDataframe[i,j] > 5 && rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j-1)] && rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j+1)] && rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j+2)]){
maxrnase3_5[i,j] = j
}
}
for (j in 3:23){
if(j != fraction_abs_max[i,4] && rep1rnasenormDataframe[i,j] > 5 && rep1rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j-1)] && rep1rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j+1)] && rep1rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j+2)] && rep1rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j-2)]) {
maxrnase1_5[i,j] = j
}
if(j != fraction_abs_max[i,5] && rep2rnasenormDataframe[i,j] > 5 && rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j-1)] && rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j+1)] && rep2ctrlnormDataframe[i,j] > rep2ctrlnormDataframe[i, (j+2)] && rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j-2)]){
maxrnase2_5[i,j] = j
}
if(j != fraction_abs_max[i,6] && rep3rnasenormDataframe[i, j] > 5 &&  rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j-1)] && rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j+1)] && rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j+2)] && rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j-2)]) {
maxrnase3_5[i,j] = j
}
}
for(j in 24){ #marginal value 3
if(j != fraction_abs_max[i,4] && rep1rnasenormDataframe[i,j] > 5 &&  rep1rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j+1)] && rep1rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j-1)] && rep1rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j-2)]){
maxrnase1_5[i,j] = j
}
if(j != fraction_abs_max[i,5] && rep2rnasenormDataframe[i,j] > 5 && rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j+1)] &&  rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j-1)] && rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j-2)]){
maxrnase2_5[i,j] = j
}
if(j != fraction_abs_max[i,6] && rep3rnasenormDataframe[i,j] > 5 && rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j+1)] && rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j-1)] && rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j-2)]){
maxrnase3_5[i,j] = j
}
}
for (j in 25){ #marginal value 4
if(j != fraction_abs_max[i,4] && rep1rnasenormDataframe[i,j] > 5 &&  rep1rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j-1)]){
maxrnase1_5[i,j] = j
}
if(j != fraction_abs_max[i,5] && rep2rnasenormDataframe[i,j] > 5 &&  rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j-1)]){
maxrnase2_5[i,j] = j
}
if(j != fraction_abs_max[i,6] && rep3rnasenormDataframe[i,j] > 5 &&  rep3rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j-1)]){
maxrnase3_5[i,j] = j
}
}
}
#Threshold 7 % of total protein amount
maxctrl1_7 = matrix(0, nrow=nrow(rep1ctrlnormDataframe), ncol=25)
maxctrl2_7 = matrix(0, nrow=nrow(rep1ctrlnormDataframe), ncol=25)
maxctrl3_7 = matrix(0, nrow=nrow(rep1ctrlnormDataframe), ncol=25)
for (i in 1:nrow(rep1ctrlnormDataframe)){
for (j in 1){ #marginal value 1
if(j != fraction_abs_max[i,1] && rep1ctrlnormDataframe[i,j] > 7 &&  rep1ctrlnormDataframe[i,j] > rep1ctrlnormDataframe[i, (j+1)]){
maxctrl1_7[i,j] = j
}
if(j != fraction_abs_max[i,2] && rep2ctrlnormDataframe[i,j] > 7 &&  rep2ctrlnormDataframe[i,j] > rep2ctrlnormDataframe[i, (j+1)]){
maxctrl2_7[i,j] = j
}
if(j != fraction_abs_max[i,3] && rep3ctrlnormDataframe[i,j] > 7 &&  rep3ctrlnormDataframe[i,j] > rep1ctrlnormDataframe[i, (j+1)]){
maxctrl3_7[i,j] = j
}
}
for(j in 2){ #marginal value 2
if(j != fraction_abs_max[i,1] && rep1ctrlnormDataframe[i,j] > 7 &&  rep1ctrlnormDataframe[i,j] > rep1ctrlnormDataframe[i, (j-1)] && rep1ctrlnormDataframe[i,j] > rep1ctrlnormDataframe[i, (j+1)] && rep1ctrlnormDataframe[i,j] > rep1ctrlnormDataframe[i, (j+2)]){
maxctrl1_7[i,j] = j
}
if(j != fraction_abs_max[i,2] && rep2ctrlnormDataframe[i,j] > 7 && rep2ctrlnormDataframe[i,j] > rep2ctrlnormDataframe[i, (j-1)] &&  rep2ctrlnormDataframe[i,j] > rep2ctrlnormDataframe[i, (j+1)] && rep2ctrlnormDataframe[i,j] > rep2ctrlnormDataframe[i, (j+2)]){
maxctrl2_7[i,j] = j
}
if(j != fraction_abs_max[i,3] && rep3ctrlnormDataframe[i,j] > 7 && rep3ctrlnormDataframe[i,j] > rep3ctrlnormDataframe[i, (j-1)] && rep3ctrlnormDataframe[i,j] > rep3ctrlnormDataframe[i, (j+1)] && rep3ctrlnormDataframe[i,j] > rep3ctrlnormDataframe[i, (j+2)]){
maxctrl3_7[i,j] = j
}
}
for (j in 3:23){
if(j != fraction_abs_max[i,1] && rep1ctrlnormDataframe[i,j] > 7 && rep1ctrlnormDataframe[i,j] > rep1ctrlnormDataframe[i, (j-1)] && rep1ctrlnormDataframe[i,j] > rep1ctrlnormDataframe[i, (j+1)] && rep1ctrlnormDataframe[i,j] > rep1ctrlnormDataframe[i, (j+2)] && rep1ctrlnormDataframe[i,j] > rep1ctrlnormDataframe[i, (j-2)]) {
maxctrl1_7[i,j] = j
}
if(j != fraction_abs_max[i,2] && rep2ctrlnormDataframe[i,j] > 7 && rep2ctrlnormDataframe[i,j] > rep2ctrlnormDataframe[i, (j-1)] && rep2ctrlnormDataframe[i,j] > rep2ctrlnormDataframe[i, (j+1)] && rep2ctrlnormDataframe[i,j] > rep2ctrlnormDataframe[i, (j+2)] && rep2ctrlnormDataframe[i,j] > rep2ctrlnormDataframe[i, (j-2)]){
maxctrl2_7[i,j] = j
}
if(j != fraction_abs_max[i,3] && rep3ctrlnormDataframe[i, j] > 7 &&  rep3ctrlnormDataframe[i,j] > rep3ctrlnormDataframe[i, (j-1)] && rep3ctrlnormDataframe[i,j] > rep3ctrlnormDataframe[i, (j+1)] && rep3ctrlnormDataframe[i,j] > rep3ctrlnormDataframe[i, (j+2)] && rep3ctrlnormDataframe[i,j] > rep3ctrlnormDataframe[i, (j-2)]) {
maxctrl3_7[i,j] = j
}
}
for(j in 24){ #marginal value 3
if(j != fraction_abs_max[i,1] && rep1ctrlnormDataframe[i,j] > 7 &&  rep1ctrlnormDataframe[i,j] > rep1ctrlnormDataframe[i, (j+1)] && rep1ctrlnormDataframe[i,j] > rep1ctrlnormDataframe[i, (j-1)] && rep1ctrlnormDataframe[i,j] > rep1ctrlnormDataframe[i, (j-2)]){
maxctrl1_7[i,j] = j
}
if(j != fraction_abs_max[i,2] && rep2ctrlnormDataframe[i,j] > 7 && rep2ctrlnormDataframe[i,j] > rep2ctrlnormDataframe[i, (j+1)] &&  rep2ctrlnormDataframe[i,j] > rep2ctrlnormDataframe[i, (j-1)] && rep2ctrlnormDataframe[i,j] > rep2ctrlnormDataframe[i, (j-2)]){
maxctrl2_7[i,j] = j
}
if(j != fraction_abs_max[i,3] && rep3ctrlnormDataframe[i,j] > 7 && rep3ctrlnormDataframe[i,j] > rep3ctrlnormDataframe[i, (j+1)] && rep3ctrlnormDataframe[i,j] > rep3ctrlnormDataframe[i, (j-1)] && rep3ctrlnormDataframe[i,j] > rep3ctrlnormDataframe[i, (j-2)]){
maxctrl3_7[i,j] = j
}
}
for (j in 25){ #marginal value 4
if(j != fraction_abs_max[i,1] && rep1ctrlnormDataframe[i,j] > 7 &&  rep1ctrlnormDataframe[i,j] > rep1ctrlnormDataframe[i, (j-1)]){
maxctrl1_7[i,j] = j
}
if(j != fraction_abs_max[i,2] && rep2ctrlnormDataframe[i,j] > 7 &&  rep2ctrlnormDataframe[i,j] > rep2ctrlnormDataframe[i, (j-1)]){
maxctrl2_7[i,j] = j
}
if(j != fraction_abs_max[i,3] && rep3ctrlnormDataframe[i,j] > 7 &&  rep3ctrlnormDataframe[i,j] > rep1ctrlnormDataframe[i, (j-1)]){
maxctrl3_7[i,j] = j
}
}
}
#rnase
maxrnase1_7 = matrix(0, nrow=nrow(rep1rnasenormDataframe), ncol=25)
maxrnase2_7 = matrix(0, nrow=nrow(rep1rnasenormDataframe), ncol=25)
maxrnase3_7 = matrix(0, nrow=nrow(rep1rnasenormDataframe), ncol=25)
for (i in 1:nrow(rep1rnasenormDataframe)){
for (j in 1){ #marginal value 1; weiterer threshold fÃ¼r Randwerte?
if(j != fraction_abs_max[i,4] && rep1rnasenormDataframe[i,j] > 7 &&  rep1rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j+1)]){
maxrnase1_7[i,j] = j
}
if(j != fraction_abs_max[i,5] && rep2rnasenormDataframe[i,j] > 7 &&  rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j+1)]){
maxrnase2_7[i,j] = j
}
if(j != fraction_abs_max[i,6] && rep3rnasenormDataframe[i,j] > 7 &&  rep3rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j+1)]){
maxrnase3_7[i,j] = j
}
}
for(j in 2){ #marginal value 2
if(j != fraction_abs_max[i,4] && rep1rnasenormDataframe[i,j] > 7 &&  rep1rnasenormDataframe[i,j] > rep1ctrlnormDataframe[i, (j-1)] && rep1ctrlnormDataframe[i,j] > rep1ctrlnormDataframe[i, (j+1)] && rep1rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j+2)]){
maxrnase1_7[i,j] = j
}
if(j != fraction_abs_max[i,5] && rep2rnasenormDataframe[i,j] > 7 && rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j-1)] &&  rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j+1)] && rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j+2)]){
maxrnase2_7[i,j] = j
}
if(j != fraction_abs_max[i,6] && rep3rnasenormDataframe[i,j] > 7 && rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j-1)] && rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j+1)] && rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j+2)]){
maxrnase3_7[i,j] = j
}
}
for (j in 3:23){
if(j != fraction_abs_max[i,4] && rep1rnasenormDataframe[i,j] > 7 && rep1rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j-1)] && rep1rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j+1)] && rep1rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j+2)] && rep1rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j-2)]) {
maxrnase1_7[i,j] = j
}
if(j != fraction_abs_max[i,5] && rep2rnasenormDataframe[i,j] > 7 && rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j-1)] && rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j+1)] && rep2ctrlnormDataframe[i,j] > rep2ctrlnormDataframe[i, (j+2)] && rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j-2)]){
maxrnase2_7[i,j] = j
}
if(j != fraction_abs_max[i,6] && rep3rnasenormDataframe[i, j] > 7 &&  rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j-1)] && rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j+1)] && rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j+2)] && rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j-2)]) {
maxrnase3_7[i,j] = j
}
}
for(j in 24){ #marginal value 3
if(j != fraction_abs_max[i,4] && rep1rnasenormDataframe[i,j] > 7 &&  rep1rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j+1)] && rep1rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j-1)] && rep1rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j-2)]){
maxrnase1_7[i,j] = j
}
if(j != fraction_abs_max[i,5] && rep2rnasenormDataframe[i,j] > 7 && rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j+1)] &&  rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j-1)] && rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j-2)]){
maxrnase2_7[i,j] = j
}
if(j != fraction_abs_max[i,6] && rep3rnasenormDataframe[i,j] > 7 && rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j+1)] && rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j-1)] && rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j-2)]){
maxrnase3_7[i,j] = j
}
}
for (j in 25){ #marginal value 4
if(j != fraction_abs_max[i,4] && rep1rnasenormDataframe[i,j] > 7 &&  rep1rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j-1)]){
maxrnase1_7[i,j] = j
}
if(j != fraction_abs_max[i,5] && rep2rnasenormDataframe[i,j] > 7 &&  rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j-1)]){
maxrnase2_7[i,j] = j
}
if(j != fraction_abs_max[i,6] && rep3rnasenormDataframe[i,j] > 3 &&  rep3rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j-1)]){
maxrnase3_7[i,j] = j
}
}
}
# jetzt haben wir drei DatensÃ¤tze mit 0 auÃer an den Fraktionen, wo ein Maximum ist
# Vergleich
# matrix that is TRUE if local maximum shifted at least two fractions, otherwise FALSE
compare_max = function(a,b){
vgl = matrix(FALSE, ncol = 25, nrow = nrow(rep1ctrlnormDataframe))
row.names(vgl) = rownames(rep1ctrlnormDataframe)
truesum = vector()
for (i in 1:nrow(vgl)){
for (j in 1) {
if(a[i,j]==b[i,j]){
} else if(a[i,j]==0 && b[i,j]!=0){
if(a[i,(j+1)] != 0){
}
else {vgl[i,j] = TRUE}
}
else if(a[i,j]!=0 && b[i,j]==0){
if(b[i,(j+1)] != 0){
}
else {vgl[i,j] = TRUE}
}
}
for (j in 2:24){
if(a[i,j]==b[i,j]){
} else if(a[i,j]==0 && b[i,j]!=0){
if(a[i,(j+1)] != 0 || a[i,(j-1)] != 0){
}
else {vgl[i,j] = TRUE}
}
else if(a[i,j]!=0 && b[i,j]==0){
if(b[i,(j+1)] != 0 || b[i,(j-1)] != 0){
}
else {vgl[i,j] = TRUE}
}
}
for (j in 25) {
if(a[i,j]==b[i,j]){
} else if(a[i,j]==0 && b[i,j]!=0){
if(a[i,(j-1)] != 0){
}
else {vgl[i,j] = TRUE}
}
else if(a[i,j]!=0 && b[i,j]==0){
if(b[i,(j-1)] != 0){
}
else {vgl[i,j] = TRUE}
}
}
truesum[i] = sum(vgl[i,])
}
return(truesum)
}
# returns vector that tells for each protein how many maxima are more than one fraction different between the compared data frames
compare_max(maxctrl2_3, maxctrl3_3)
comp_rep = function(a,b,c){
rows_rep = vector()
rows_rep = compare_max(a, b)
rows_rep = cbind(rows_rep, compare_max(a,c))
rows_rep = cbind(rows_rep, compare_max(b,c))
row.names(rows_rep) = rownames(rep1ctrlnormDataframe)
return(rows_rep)
}
# matrix with number of at least one fraction local maxima differences for comparison of each two replicates out of three (different thresholds of total protein amount 3 %, 5 %, 7 %)
loc_max_ctrl3 = as.data.frame(comp_rep(maxctrl1_3, maxctrl2_3, maxctrl3_3))
loc_max_ctrl5 = as.data.frame(comp_rep(maxctrl1_5, maxctrl2_5, maxctrl3_5))
loc_max_ctrl7 = as.data.frame(comp_rep(maxctrl3_3, maxctrl3_5, maxctrl3_7))
loc_max_rnase3 = as.data.frame(comp_rep(maxrnase1_3, maxrnase2_3, maxrnase3_3))
loc_max_rnase5 = as.data.frame(comp_rep(maxrnase1_5, maxrnase2_5, maxrnase3_5))
loc_max_rnase7 = as.data.frame(comp_rep(maxrnase1_7, maxrnase2_7, maxrnase3_7))
# counting proteins that show at least one fraction shift when comparing all replicates in Ctrl and/or RNase
not_repro = function(a,b) {
u = vector()
for (i in 1:nrow(loc_max_ctrl3)) {
if ((a[i,1] != 0 && a[i,2] != 0 && a[i,3] != 0) || (b[i,1] != 0 && b[i,2] != 0 && b[i,3] != 0)){
u[i] = TRUE
}
else {u[i] = FALSE}
}
return(u)
}
thres_3 = not_repro(loc_max_ctrl3, loc_max_rnase3)
sum(thres_3) # remove 502 proteins with threshold 3%
thres_5 = not_repro(loc_max_ctrl5, loc_max_rnase5)
sum(thres_5) # remove 411 proteins with threshold 5%
thres_7 = not_repro(loc_max_ctrl7, loc_max_rnase7)
sum(thres_7) # remove 365 proteins with threshold 7%
# decide to go with maximum has to contain at least 5 % of total protein amount
# remove proteins that are not reproducible
FullDat = FullDat[- which(thres_5 == TRUE),]
rep1ctrlnormDataframe = rep1ctrlnormDataframe[- which(thres_5 == TRUE),]
rep2ctrlnormDataframe = rep2ctrlnormDataframe[- which(thres_5 == TRUE),]
rep3ctrlnormDataframe = rep3ctrlnormDataframe[- which(thres_5 == TRUE),]
rep1rnasenormDataframe = rep1rnasenormDataframe[- which(thres_5 == TRUE),]
rep2rnasenormDataframe = rep2rnasenormDataframe[- which(thres_5 == TRUE),]
rep3rnasenormDataframe = rep3rnasenormDataframe[- which(thres_5 == TRUE),]
tripCtrlnormdat = tripCtrlnormdat[- which(thres_5==TRUE),]
tripRnasenormdat = tripRnasenormdat[- which(thres_5==TRUE),]
#mean of control replicates of all proteins
meanRepctrl = matrix(nrow= nrow(FullDat), ncol = 25)
for (j in 1:nrow(FullDat)){
for (i in 1:25){
meanRepctrl[j,i] = (rep1ctrlnormDataframe[j,i] + rep2ctrlnormDataframe[j,i] + rep3ctrlnormDataframe[j,i])/3}}
#mean of rnase replicates of all proteins
meanRepRNase = matrix(nrow= nrow(FullDat), ncol = 25)
for (j in 1:nrow(FullDat)){
for (i in 1:25){
meanRepRNase[j,i] = (rep1rnasenormDataframe[j,i] + rep2rnasenormDataframe[j,i] + rep3rnasenormDataframe[j,i])/3}}
y = 1:25
for (i in 1:6){
plot(y, meanRepctrl[i,], type ="o", pch = 20, ylab = "percentage of protein amount", xlab = "fractions of sucrose density gradient", col = "cyan")
lines(y,meanRepRNase[i,], type = "o", pch = 20, col = "magenta")
}
# absolute maxima
abs_max = data.frame(row.names = rownames(rep1ctrlnormDataframe))
for (i in 1:nrow(rep1ctrlnormDataframe)){
abs_max[i,1] = which.max(meanRepctrl[i,])
abs_max[i,2] = which.max(meanRepRNase[i,])
}
abs_max$compare = ifelse(abs(abs_max$V1-abs_max$V2) > 1, TRUE, FALSE)
sum(abs_max$compare)
## there are 1118 proteins whose global maximum shifts at least 2 fractions
abs_max_shift = rownames (abs_max) [abs_max$compare==TRUE] ## proteins shifting in global maximum
# local maxima
max_shift_ctrl = matrix(0, nrow = nrow(rep1ctrlnormDataframe), ncol = 25)
max_shift_rnase = matrix(0, nrow = nrow(rep1ctrlnormDataframe), ncol = 25)
for (i in 1:nrow(rep1ctrlnormDataframe)){
for (j in 1){ #marginal value 1
if(j != abs_max[i,1] && meanRepctrl[i,j] > 5 &&  meanRepctrl[i,j] > meanRepctrl[i, (j+1)]){
max_shift_ctrl[i,j] = j
}
if(j != abs_max[i,2] && meanRepRNase[i,j] > 5 && meanRepRNase[i,j] > meanRepRNase[i, (j+1)]){
max_shift_rnase[i,j] = j
}
}
for(j in 2){ #marginal value 2
if(j != abs_max[i,1] && meanRepctrl[i,j] > 5 &&  meanRepctrl[i,j] > meanRepctrl[i, (j-1)] && meanRepctrl[i,j] > meanRepctrl[i, (j+1)] && meanRepctrl[i,j] > meanRepctrl[i, (j+2)]){
max_shift_ctrl[i,j] = j
}
if(j != fraction_abs_max[i,2] && meanRepRNase[i,j] > 5 && meanRepRNase[i,j] > meanRepRNase[i, (j-1)] &&  meanRepRNase[i,j] > meanRepRNase[i, (j+1)] && meanRepRNase[i,j] > meanRepRNase[i, (j+2)]){
max_shift_rnase[i,j] = j
}
}
for (j in 3:23){
if(j != abs_max[i,1] && meanRepctrl[i,j] > 5 && meanRepctrl[i,j] > meanRepctrl[i, (j-1)] && meanRepctrl[i,j] > meanRepctrl[i, (j+1)] && meanRepctrl[i,j] > meanRepctrl[i, (j+2)] && meanRepctrl[i,j] > meanRepctrl[i, (j-2)]) {
max_shift_ctrl[i,j] = j
}
if(j != abs_max[i,2] && meanRepRNase[i,j] > 5 && meanRepRNase[i,j] > meanRepRNase[i, (j-1)] && meanRepRNase[i,j] > meanRepRNase[i, (j+1)] && meanRepRNase[i,j] > meanRepRNase[i, (j+2)] && meanRepRNase[i,j] > meanRepRNase[i, (j-2)]){
max_shift_rnase[i,j] = j
}
}
for(j in 24){ #marginal value 3
if(j != abs_max[i,1] && meanRepctrl[i,j] > 5 &&  meanRepctrl[i,j] > meanRepctrl[i, (j+1)] && meanRepctrl[i,j] > meanRepctrl[i, (j-1)] && meanRepctrl[i,j] > meanRepctrl[i, (j-2)]){
max_shift_ctrl[i,j] = j
}
if(j != abs_max[i,2] && meanRepRNase[i,j] > 5 && meanRepRNase[i,j] > meanRepRNase[i, (j+1)] &&  meanRepRNase[i,j] > meanRepRNase[i, (j-1)] && meanRepRNase[i,j] > meanRepRNase[i, (j-2)]){
max_shift_rnase[i,j] = j
}
}
for (j in 25){ #marginal value 4
if(j != abs_max[i,1] && meanRepctrl[i,j] > 5 &&  meanRepctrl[i,j] > meanRepctrl[i, (j-1)]){
max_shift_ctrl[i,j] = j
}
if(j != abs_max[i,2] && meanRepRNase[i,j] > 5 &&  meanRepRNase[i,j] > meanRepRNase[i, (j-1)]){
max_shift_rnase[i,j] = j
}
}
}
count_shift = compare_max(max_shift_ctrl, max_shift_rnase)
length(which(count_shift!=0))
loc_max_shift = rownames(rep1ctrlnormDataframe)[which(count_shift!=0)]
row.names(max_shift_ctrl) = rownames(rep1ctrlnormDataframe)
row.names(max_shift_rnase) = rownames(rep1ctrlnormDataframe)
max_shift_ctrl = as.data.frame(max_shift_ctrl)
max_shift_rnase = as.data.frame(max_shift_rnase)
max_shift_ctrl$count = count_shift
max_shift_rnase$count = count_shift
max_shift_ctrl = max_shift_ctrl[which(max_shift_ctrl$count > 0),]
max_shift_rnase = max_shift_rnase[which(max_shift_rnase$count > 0),]
#proteins_local_shift = as.data.frame(cbind(max_shift_ctrl, max_shift_rnase))
#proteins_local_shift$count = count_shift
# compare shifts in absolute and local maxima as there are proteins shifting in both
id = vector()
for (i in 1:length(loc_max_shift)) {
j = 1
for(j in 1:length(abs_max_shift)){
if(loc_max_shift[i]!=abs_max_shift[j]){
id[i] = FALSE
}
else if (loc_max_shift[i]==abs_max_shift[j]) {
id[i] = TRUE
break
}
}
}
sum(id)
# 910 proteins are both found in absolute and local maxima shifts
loc_max_shift = loc_max_shift[- which(id==TRUE)] ## loc_max_shift are all proteins shifting in local maximum excluded those also shifting in global maximum
# number of shifting proteins
sum(id)+(length(abs_max_shift)-sum(id))+length(loc_max_shift) ## 2471 proteins have a shift and might be RNA-binding or RNA-dependent
# absolute maxima
abs_max_yc = vector()
abs_max_yr = vector()
for (i in 1:nrow(abs_max)) {
abs_max_yc[i] = meanRepctrl[i, abs_max[i,1]]
abs_max_yr[i] = meanRepRNase[i, abs_max[i,2]]
}
abs_max$ymaxc = abs_max_yc
abs_max$ymaxr = abs_max_yr
l = vector()
for (i in 1:nrow(abs_max)) {
if(abs_max[i,3]==TRUE) {
fc = abs_max[i,1]
l[i] = t.test(c(tripCtrlnormdat[i,fc], tripCtrlnormdat[i, (fc+25)], tripCtrlnormdat[i, (fc+50)]), c(tripRnasenormdat[i,fc], tripRnasenormdat[i, (fc+25)], tripRnasenormdat[i, (fc+50)]), alternative = "two.sided")$p.value
}
else {l[i] = 10} ## random value chosen larger than 1
}
abs_max$pvalue = l
abs_max$sign = ifelse(abs_max$pvalue >= 0.025, FALSE, TRUE) ## 0.025 due to two-sided t-test
sum(abs_max$sign) ## how many proteins have a significant shift in protein amount in their global maximum (869 out of 1118)
colnames(abs_max)[1] = "global_max_ctrl"
colnames(abs_max)[2] = "global_max_rnase"
proteins_global_shift = data.frame(abs_max[(which(abs_max$sign == TRUE)),])
proteins_global_shift$p_adjusted = p.adjust(proteins_global_shift$pvalue, method = "fdr")
proteins_global_shift$sign_ad = ifelse(proteins_global_shift$p_adjusted >= 0.025, FALSE, TRUE)
sum(proteins_global_shift$sign_ad) ## all protein shift identified are still significant after fdr-correction
proteins_global_shift$left_right = ifelse(proteins_global_shift$global_max_ctrl < proteins_global_shift$global_max_rnase, "right", "left")
# local maxima
compare_loc_max = function(a,b){
vgl = matrix(10, ncol = 25, nrow = nrow(rep1ctrlnormDataframe))
row.names(vgl) = rownames(rep1ctrlnormDataframe)
for (i in 1:nrow(vgl)){
for (j in 1) {
if(a[i,j]==b[i,j]){
} else if(a[i,j]==0 && b[i,j]!=0){
if(a[i,(j+1)] != 0){
}
else {
vgl[i,j] = t.test(c(tripCtrlnormdat[i,j], tripCtrlnormdat[i, (j+25)], tripCtrlnormdat[i, (j+50)]), c(tripRnasenormdat[i,j], tripRnasenormdat[i, (j+25)], tripRnasenormdat[i, (j+50)]), alternative = "two.sided")$p.value
}
}
else if(a[i,j]!=0 && b[i,j]==0){
if(b[i,(j+1)] != 0){
}
else {
vgl[i,j] = t.test(c(tripCtrlnormdat[i,j], tripCtrlnormdat[i, (j+25)], tripCtrlnormdat[i, (j+50)]), c(tripRnasenormdat[i,j], tripRnasenormdat[i, (j+25)], tripRnasenormdat[i, (j+50)]), alternative = "two.sided")$p.value
}
}
}
for (j in 2:24){
if(a[i,j]==b[i,j]){
} else if(a[i,j]==0 && b[i,j]!=0){
if(a[i,(j+1)] != 0 || a[i,(j-1)] != 0){
}
else {
vgl[i,j] = t.test(c(tripCtrlnormdat[i,j], tripCtrlnormdat[i, (j+25)], tripCtrlnormdat[i, (j+50)]), c(tripRnasenormdat[i,j], tripRnasenormdat[i, (j+25)], tripRnasenormdat[i, (j+50)]), alternative = "two.sided")$p.value
}
}
else if(a[i,j]!=0 && b[i,j]==0){
if(b[i,(j+1)] != 0 || b[i,(j-1)] != 0){
}
else {
vgl[i,j] = t.test(c(tripCtrlnormdat[i,j], tripCtrlnormdat[i, (j+25)], tripCtrlnormdat[i, (j+50)]), c(tripRnasenormdat[i,j], tripRnasenormdat[i, (j+25)], tripRnasenormdat[i, (j+50)]), alternative = "two.sided")$p.value
}
}
}
for (j in 25) {
if(a[i,j]==b[i,j]){
} else if(a[i,j]==0 && b[i,j]!=0){
if(a[i,(j-1)] != 0){
}
else {
vgl[i,j] = t.test(c(tripCtrlnormdat[i,j], tripCtrlnormdat[i, (j+25)], tripCtrlnormdat[i, (j+50)]), c(tripRnasenormdat[i,j], tripRnasenormdat[i, (j+25)], tripRnasenormdat[i, (j+50)]), alternative = "two.sided")$p.value
}
}
else if(a[i,j]!=0 && b[i,j]==0){
if(b[i,(j-1)] != 0){
}
else {
vgl[i,j] = t.test(c(tripCtrlnormdat[i,j], tripCtrlnormdat[i, (j+25)], tripCtrlnormdat[i, (j+50)]), c(tripRnasenormdat[i,j], tripRnasenormdat[i, (j+25)], tripRnasenormdat[i, (j+50)]), alternative = "two.sided")$p.value
}
}
}
}
return(vgl)
}
# returns matrix with p-values for local maximum shifts of protein x (row) in fraction y (column)
max_shift_ctrl = max_shift_ctrl[,-26]
max_shift_rnase = max_shift_rnase[,-26]
compare_loc_max(max_shift_ctrl, max_shift_rnase)
compare_loc_max(max_shift_ctrl, max_shift_rnase)
compare_loc_max(max_shift_ctrl, max_shift_rnase)
View(loc_max_rnase5)
pagenumbering{gobble}
pagenumbering{gobble}
install.packages("radix")
