}
if(j != fraction_abs_max[i,6] && rep3rnasenormDataframe[i,j] > 7 &&  rep3rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j+1)]){
maxrnase3_7[i,j] = j
}
}
for(j in 2){ ## marginal value 2
if(j != fraction_abs_max[i,4] && rep1rnasenormDataframe[i,j] > 7 &&  rep1rnasenormDataframe[i,j] > rep1ctrlnormDataframe[i, (j-1)] && rep1ctrlnormDataframe[i,j] > rep1ctrlnormDataframe[i, (j+1)] && rep1rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j+2)]){
maxrnase1_7[i,j] = j
}
if(j != fraction_abs_max[i,5] && rep2rnasenormDataframe[i,j] > 7 && rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j-1)] &&  rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j+1)] && rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j+2)]){
maxrnase2_7[i,j] = j
}
if(j != fraction_abs_max[i,6] && rep3rnasenormDataframe[i,j] > 7 && rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j-1)] && rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j+1)] && rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j+2)]){
maxrnase3_7[i,j] = j
}
}
for (j in 3:23){
if(j != fraction_abs_max[i,4] && rep1rnasenormDataframe[i,j] > 7 && rep1rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j-1)] && rep1rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j+1)] && rep1rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j+2)] && rep1rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j-2)]) {
maxrnase1_7[i,j] = j
}
if(j != fraction_abs_max[i,5] && rep2rnasenormDataframe[i,j] > 7 && rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j-1)] && rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j+1)] && rep2ctrlnormDataframe[i,j] > rep2ctrlnormDataframe[i, (j+2)] && rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j-2)]){
maxrnase2_7[i,j] = j
}
if(j != fraction_abs_max[i,6] && rep3rnasenormDataframe[i, j] > 7 &&  rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j-1)] && rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j+1)] && rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j+2)] && rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j-2)]) {
maxrnase3_7[i,j] = j
}
}
for(j in 24){ ## marginal value 3
if(j != fraction_abs_max[i,4] && rep1rnasenormDataframe[i,j] > 7 &&  rep1rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j+1)] && rep1rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j-1)] && rep1rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j-2)]){
maxrnase1_7[i,j] = j
}
if(j != fraction_abs_max[i,5] && rep2rnasenormDataframe[i,j] > 7 && rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j+1)] &&  rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j-1)] && rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j-2)]){
maxrnase2_7[i,j] = j
}
if(j != fraction_abs_max[i,6] && rep3rnasenormDataframe[i,j] > 7 && rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j+1)] && rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j-1)] && rep3rnasenormDataframe[i,j] > rep3rnasenormDataframe[i, (j-2)]){
maxrnase3_7[i,j] = j
}
}
for (j in 25){ ## marginal value 4
if(j != fraction_abs_max[i,4] && rep1rnasenormDataframe[i,j] > 7 &&  rep1rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j-1)]){
maxrnase1_7[i,j] = j
}
if(j != fraction_abs_max[i,5] && rep2rnasenormDataframe[i,j] > 7 &&  rep2rnasenormDataframe[i,j] > rep2rnasenormDataframe[i, (j-1)]){
maxrnase2_7[i,j] = j
}
if(j != fraction_abs_max[i,6] && rep3rnasenormDataframe[i,j] > 7 &&  rep3rnasenormDataframe[i,j] > rep1rnasenormDataframe[i, (j-1)]){
maxrnase3_7[i,j] = j
}
}
}
## Now we have three data sets for the different thresholds which contain only zeros except on the positions where we found a maximum.
## Comparison thresholds
## matrix that is TRUE if local maximum shifted at least two fractions, otherwise FALSE
compare_max = function(a,b){
vgl = matrix(FALSE, ncol = 25, nrow = nrow(rep1ctrlnormDataframe))
row.names(vgl) = rownames(rep1ctrlnormDataframe)
truesum = vector()
for (i in 1:nrow(vgl)){
for (j in 1) {
if(a[i,j]==b[i,j]){
} else if(a[i,j]==0 && b[i,j]!=0){
if(a[i,(j+1)] != 0){
}
else {vgl[i,j] = TRUE}
}
else if(a[i,j]!=0 && b[i,j]==0){
if(b[i,(j+1)] != 0){
}
else {vgl[i,j] = TRUE}
}
}
for (j in 2:24){
if(a[i,j]==b[i,j]){
} else if(a[i,j]==0 && b[i,j]!=0){
if(a[i,(j+1)] != 0 || a[i,(j-1)] != 0){
}
else {vgl[i,j] = TRUE}
}
else if(a[i,j]!=0 && b[i,j]==0){
if(b[i,(j+1)] != 0 || b[i,(j-1)] != 0){
}
else {vgl[i,j] = TRUE}
}
}
for (j in 25) {
if(a[i,j]==b[i,j]){
} else if(a[i,j]==0 && b[i,j]!=0){
if(a[i,(j-1)] != 0){
}
else {vgl[i,j] = TRUE}
}
else if(a[i,j]!=0 && b[i,j]==0){
if(b[i,(j-1)] != 0){
}
else {vgl[i,j] = TRUE}
}
}
truesum[i] = sum(vgl[i,])
}
return(truesum)
}
## compare_max returns vector that tells for each protein how many maxima are more than one fraction different between the compared data frames
comp_rep = function(a,b,c){
rows_rep = vector()
rows_rep = compare_max(a, b)
rows_rep = cbind(rows_rep, compare_max(a,c))
rows_rep = cbind(rows_rep, compare_max(b,c))
row.names(rows_rep) = rownames(rep1ctrlnormDataframe)
return(rows_rep)
}
## matrix with number of at least one fraction local maxima differences for comparison of each of two replicates out of three (different thresholds of total protein amount 3%, 5%, 7%)
loc_max_ctrl3 = as.data.frame(comp_rep(maxctrl1_3, maxctrl2_3, maxctrl3_3))
loc_max_ctrl5 = as.data.frame(comp_rep(maxctrl1_5, maxctrl2_5, maxctrl3_5))
loc_max_ctrl7 = as.data.frame(comp_rep(maxctrl3_3, maxctrl3_5, maxctrl3_7))
loc_max_rnase3 = as.data.frame(comp_rep(maxrnase1_3, maxrnase2_3, maxrnase3_3))
loc_max_rnase5 = as.data.frame(comp_rep(maxrnase1_5, maxrnase2_5, maxrnase3_5))
loc_max_rnase7 = as.data.frame(comp_rep(maxrnase1_7, maxrnase2_7, maxrnase3_7))
## counting proteins that show at least one fraction shift when comparing all replicates in Ctrl and/or RNase
not_repro = function(a,b) {
u = vector()
for (i in 1:nrow(loc_max_ctrl3)) {
if ((a[i,1] != 0 && a[i,2] != 0 && a[i,3] != 0) || (b[i,1] != 0 && b[i,2] != 0 && b[i,3] != 0)){
u[i] = TRUE
}
else {u[i] = FALSE}
}
return(u)
}
thres_3 = not_repro(loc_max_ctrl3, loc_max_rnase3)
sum(thres_3) ## we would remove 502 proteins with threshold 3%
thres_5 = not_repro(loc_max_ctrl5, loc_max_rnase5)
sum(thres_5) ## we would remove 411 proteins with threshold 5%
thres_7 = not_repro(loc_max_ctrl7, loc_max_rnase7)
sum(thres_7) ## we would remove 365 proteins with threshold 7%
## We decide to go with the definition that the maximum has to contain at least 5% of total protein amount
## remove proteins that are not reproducible from all data sets
FullDat = FullDat[- which(thres_5 == TRUE),]
rep1ctrlnormDataframe = rep1ctrlnormDataframe[- which(thres_5 == TRUE),]
rep2ctrlnormDataframe = rep2ctrlnormDataframe[- which(thres_5 == TRUE),]
rep3ctrlnormDataframe = rep3ctrlnormDataframe[- which(thres_5 == TRUE),]
rep1rnasenormDataframe = rep1rnasenormDataframe[- which(thres_5 == TRUE),]
rep2rnasenormDataframe = rep2rnasenormDataframe[- which(thres_5 == TRUE),]
rep3rnasenormDataframe = rep3rnasenormDataframe[- which(thres_5 == TRUE),]
tripCtrlnormdat = tripCtrlnormdat[- which(thres_5==TRUE),]
tripRnasenormdat = tripRnasenormdat[- which(thres_5==TRUE),]
# Chunk 14
## mean of control replicates of all proteins
meanRepctrl = matrix(nrow= nrow(FullDat), ncol = 25)
for (j in 1:nrow(FullDat)){
for (i in 1:25){
meanRepctrl[j,i] = (rep1ctrlnormDataframe[j,i] + rep2ctrlnormDataframe[j,i] + rep3ctrlnormDataframe[j,i])/3}}
## mean of RNase replicates of all proteins
meanRepRNase = matrix(nrow= nrow(FullDat), ncol = 25)
for (j in 1:nrow(FullDat)){
for (i in 1:25){
meanRepRNase[j,i] = (rep1rnasenormDataframe[j,i] + rep2rnasenormDataframe[j,i] + rep3rnasenormDataframe[j,i])/3}}
# Chunk 15
y = 1:25
for (i in 1:10){
plot(y, meanRepctrl[i,], type ="o", pch = 20, ylab = "percentage of protein amount", xlab = "fractions of sucrose density gradient", col = "cyan")
lines(y,meanRepRNase[i,], type = "o", pch = 20, col = "magenta")
}
# Chunk 16
## calculate global maxima
abs_max = data.frame(row.names = rownames(rep1ctrlnormDataframe))
for (i in 1:nrow(rep1ctrlnormDataframe)){
abs_max[i,1] = which.max(meanRepctrl[i,])
abs_max[i,2] = which.max(meanRepRNase[i,])
}
abs_max$compare = ifelse(abs(abs_max$V1-abs_max$V2) > 1, TRUE, FALSE)
sum(abs_max$compare)
## there are 1118 proteins whose global maximum shifts at least 2 fractions (x-shift)
abs_max_shift = rownames (abs_max) [abs_max$compare==TRUE] ## proteins x-shifting in global maximum
# Chunk 17
## calculate local maxima
max_shift_ctrl = matrix(0, nrow = nrow(rep1ctrlnormDataframe), ncol = 25)
max_shift_rnase = matrix(0, nrow = nrow(rep1ctrlnormDataframe), ncol = 25)
for (i in 1:nrow(rep1ctrlnormDataframe)){
for (j in 1){ ## marginal value 1
if(j != abs_max[i,1] && meanRepctrl[i,j] > 5 &&  meanRepctrl[i,j] > meanRepctrl[i, (j+1)]){
max_shift_ctrl[i,j] = j
}
if(j != abs_max[i,2] && meanRepRNase[i,j] > 5 && meanRepRNase[i,j] > meanRepRNase[i, (j+1)]){
max_shift_rnase[i,j] = j
}
}
for(j in 2){ ## marginal value 2
if(j != abs_max[i,1] && meanRepctrl[i,j] > 5 &&  meanRepctrl[i,j] > meanRepctrl[i, (j-1)] && meanRepctrl[i,j] > meanRepctrl[i, (j+1)] && meanRepctrl[i,j] > meanRepctrl[i, (j+2)]){
max_shift_ctrl[i,j] = j
}
if(j != abs_max[i,2] && meanRepRNase[i,j] > 5 && meanRepRNase[i,j] > meanRepRNase[i, (j-1)] &&  meanRepRNase[i,j] > meanRepRNase[i, (j+1)] && meanRepRNase[i,j] > meanRepRNase[i, (j+2)]){
max_shift_rnase[i,j] = j
}
}
for (j in 3:23){
if(j != abs_max[i,1] && meanRepctrl[i,j] > 5 && meanRepctrl[i,j] > meanRepctrl[i, (j-1)] && meanRepctrl[i,j] > meanRepctrl[i, (j+1)] && meanRepctrl[i,j] > meanRepctrl[i, (j+2)] && meanRepctrl[i,j] > meanRepctrl[i, (j-2)]) {
max_shift_ctrl[i,j] = j
}
if(j != abs_max[i,2] && meanRepRNase[i,j] > 5 && meanRepRNase[i,j] > meanRepRNase[i, (j-1)] && meanRepRNase[i,j] > meanRepRNase[i, (j+1)] && meanRepRNase[i,j] > meanRepRNase[i, (j+2)] && meanRepRNase[i,j] > meanRepRNase[i, (j-2)]){
max_shift_rnase[i,j] = j
}
}
for(j in 24){ ## marginal value 3
if(j != abs_max[i,1] && meanRepctrl[i,j] > 5 &&  meanRepctrl[i,j] > meanRepctrl[i, (j+1)] && meanRepctrl[i,j] > meanRepctrl[i, (j-1)] && meanRepctrl[i,j] > meanRepctrl[i, (j-2)]){
max_shift_ctrl[i,j] = j
}
if(j != abs_max[i,2] && meanRepRNase[i,j] > 5 && meanRepRNase[i,j] > meanRepRNase[i, (j+1)] &&  meanRepRNase[i,j] > meanRepRNase[i, (j-1)] && meanRepRNase[i,j] > meanRepRNase[i, (j-2)]){
max_shift_rnase[i,j] = j
}
}
for (j in 25){ ## marginal value 4
if(j != abs_max[i,1] && meanRepctrl[i,j] > 5 &&  meanRepctrl[i,j] > meanRepctrl[i, (j-1)]){
max_shift_ctrl[i,j] = j
}
if(j != abs_max[i,2] && meanRepRNase[i,j] > 5 &&  meanRepRNase[i,j] > meanRepRNase[i, (j-1)]){
max_shift_rnase[i,j] = j
}
}
}
count_shift = compare_max(max_shift_ctrl, max_shift_rnase)
length(which(count_shift ==0))
loc_max_shift = rownames(rep1ctrlnormDataframe)[which(count_shift!=0)]
## compare x-shifts in absolute and local maxima as there are proteins shifting in both
id = vector()
for (i in 1:length(loc_max_shift)) {
j = 1
for(j in 1:length(abs_max_shift)){
if(loc_max_shift[i]!=abs_max_shift[j]){
id[i] = FALSE
}
else if (loc_max_shift[i]==abs_max_shift[j]) {
id[i] = TRUE
break
}
}
}
sum(id) ## 910 proteins are both found in absolute and local maxima shifts
loc_max_shift = loc_max_shift[- which(id==TRUE)] ## loc_max_shift are all proteins shifting in local maximum excluded those also shifting in global maximum
## number of shifting proteins
sum(id)+(length(abs_max_shift)-sum(id))+length(loc_max_shift) ## 2479 proteins have a shift and might be RNA-binding or RNA-dependent
# Chunk 18
## calculate global maxima
abs_max_yc = vector()
abs_max_yr = vector()
## two vectors (Ctrl/RNase) containing the y-value (protein amount) of the global maximum
for (i in 1:nrow(abs_max)) {
abs_max_yc[i] = meanRepctrl[i, abs_max[i,1]]
abs_max_yr[i] = meanRepRNase[i, abs_max[i,2]]
}
## add vectors as new columns to global maxima data frame (abs_max)
abs_max$ymaxc = abs_max_yc
abs_max$ymaxr = abs_max_yr
## vector l contains p-value for each global maximum with a shift (abs_max[i,3] == TRUE), otherwise random number larger than1 for distinction
l = vector()
for (i in 1:nrow(abs_max)) {
if(abs_max[i,3]==TRUE) {
fc = abs_max[i,1]
l[i] = t.test(c(tripCtrlnormdat[i,fc], tripCtrlnormdat[i, (fc+25)], tripCtrlnormdat[i, (fc+50)]), c(tripRnasenormdat[i,fc], tripRnasenormdat[i, (fc+25)], tripRnasenormdat[i, (fc+50)]), alternative = "two.sided")$p.value
}
else {l[i] = 10} ## random value chosen larger than 1
}
abs_max$pvalue = l
abs_max$sign = ifelse(abs_max$pvalue >= 0.025, FALSE, TRUE) ## 0.025 due to two-sided t-test
sum(abs_max$sign) ## how many proteins have a significant shift in protein amount in their global maximum (869 out of 1118)
colnames(abs_max)[1] = "global_max_ctrl"
colnames(abs_max)[2] = "global_max_rnase"
proteins_global_shift = data.frame(abs_max[(which(abs_max$sign == TRUE)),]) ## dataframe containing all proteins that shift in global maximum before fdr-correction
## create new column containing fdr-corrected p-value
proteins_global_shift$p_adjusted = p.adjust(proteins_global_shift$pvalue, method = "fdr")
proteins_global_shift$sign_ad = ifelse(proteins_global_shift$p_adjusted >= 0.025, FALSE, TRUE)
sum(proteins_global_shift$sign_ad) ## all 869 proteins with shift identified are still significant after fdr-correction
## create new column containing information about right or left shift (difference of Ctrl and RNase global maxima fraction)
proteins_global_shift$leftorright = ifelse(proteins_global_shift$global_max_ctrl < proteins_global_shift$global_max_rnase, "right", "left")
# Chunk 19
## calculate local maxima
## Generate matrices for statistical testing of local maxima
p_loc_max = matrix(10, ncol = 25, nrow = nrow(rep1ctrlnormDataframe)) ## matrix for adjusted p-values
row.names(p_loc_max) = rownames(rep1ctrlnormDataframe)
p_loc_shift = vector(length = nrow(rep1ctrlnormDataframe)) ## vector distinguishing significant or not significant y-shift
sign_loc_shiftc = matrix(0, ncol = 25, nrow = nrow(rep1ctrlnormDataframe)) ## matrix for fractions of shifting local maxima
sign_loc_shiftr = matrix(0, ncol = 25, nrow = nrow(rep1ctrlnormDataframe)) ## matrix for fractions of shifting local maxima
for (i in 1:nrow(p_loc_max)) {
if(count_shift[i] > 0){
for (j in 1) {
if(max_shift_ctrl[i,j] == max_shift_rnase[i,j]){
} else if(max_shift_ctrl[i,j]==0 && max_shift_rnase[i,j]!=0){
if(max_shift_ctrl[i,(j+1)] != 0){
}
else {
sign_loc_shiftr[i,j] = j
p_loc_max[i,j] = t.test(c(tripCtrlnormdat[i,j], tripCtrlnormdat[i, (j+25)], tripCtrlnormdat[i, (j+50)]), c(tripRnasenormdat[i,j], tripRnasenormdat[i, (j+25)], tripRnasenormdat[i, (j+50)]), alternative = "two.sided")$p.value
p_loc_max[i,j] = p.adjust(p_loc_max[i,j], method = "fdr")
if(p_loc_max[i,j] < 0.025) { p_loc_shift[i]=TRUE }
}
}
else if(max_shift_ctrl[i,j]!=0 && max_shift_rnase[i,j]==0){
if(max_shift_rnase[i,(j+1)] != 0){
}
else {
sign_loc_shiftc[i,j] = j
p_loc_max[i,j] = t.test(c(tripCtrlnormdat[i,j], tripCtrlnormdat[i, (j+25)], tripCtrlnormdat[i, (j+50)]), c(tripRnasenormdat[i,j], tripRnasenormdat[i, (j+25)], tripRnasenormdat[i, (j+50)]), alternative = "two.sided")$p.value
p_loc_max[i,j] = p.adjust(p_loc_max[i,j], method = "fdr")
if(p_loc_max[i,j] < 0.025) { p_loc_shift[i]=TRUE }
}
}
}
for (j in 2:24){
if(max_shift_ctrl[i,j]==max_shift_rnase[i,j]){
} else if(max_shift_ctrl[i,j]==0 && max_shift_rnase[i,j]!=0){
if(max_shift_ctrl[i,(j+1)] != 0 || max_shift_ctrl[i,(j-1)] != 0){
}
else {
sign_loc_shiftr[i,j] = j
p_loc_max[i,j] = t.test(c(tripCtrlnormdat[i,j], tripCtrlnormdat[i, (j+25)], tripCtrlnormdat[i, (j+50)]), c(tripRnasenormdat[i,j], tripRnasenormdat[i, (j+25)], tripRnasenormdat[i, (j+50)]), alternative = "two.sided")$p.value
p_loc_max[i,j] = p.adjust(p_loc_max[i,j], method = "fdr")
if(p_loc_max[i,j] < 0.025) { p_loc_shift[i]=TRUE }
}
}
else if(max_shift_ctrl[i,j]!=0 && max_shift_rnase[i,j]==0){
if(max_shift_rnase[i,(j+1)] != 0 || max_shift_rnase[i,(j-1)] != 0){
}
else {
sign_loc_shiftc[i,j] = j
p_loc_max[i,j] = t.test(c(tripCtrlnormdat[i,j], tripCtrlnormdat[i, (j+25)], tripCtrlnormdat[i, (j+50)]), c(tripRnasenormdat[i,j], tripRnasenormdat[i, (j+25)], tripRnasenormdat[i, (j+50)]), alternative = "two.sided")$p.value
p_loc_max[i,j] = p.adjust(p_loc_max[i,j], method = "fdr")
if(p_loc_max[i,j] < 0.025) { p_loc_shift[i]=TRUE }
}
}
}
for (j in 25) {
if(max_shift_ctrl[i,j]==max_shift_rnase[i,j]){
} else if(max_shift_ctrl[i,j]==0 && max_shift_rnase[i,j]!=0){
if(max_shift_ctrl[i,(j-1)] != 0){
}
else {
sign_loc_shiftr[i,j] = j
p_loc_max[i,j] = t.test(c(tripCtrlnormdat[i,j], tripCtrlnormdat[i, (j+25)], tripCtrlnormdat[i, (j+50)]), c(tripRnasenormdat[i,j], tripRnasenormdat[i, (j+25)], tripRnasenormdat[i, (j+50)]), alternative = "two.sided")$p.value
p_loc_max[i,j] = p.adjust(p_loc_max[i,j], method = "fdr")
if(p_loc_max[i,j] < 0.025) { p_loc_shift[i]=TRUE }
}
}
else if(max_shift_ctrl[i,j]!=0 && max_shift_rnase[i,j]==0){
if(max_shift_rnase[i,(j-1)] != 0){
}
else {
sign_loc_shiftc[i,j] = j
p_loc_max[i,j] = t.test(c(tripCtrlnormdat[i,j], tripCtrlnormdat[i, (j+25)], tripCtrlnormdat[i, (j+50)]), c(tripRnasenormdat[i,j], tripRnasenormdat[i, (j+25)], tripRnasenormdat[i, (j+50)]), alternative = "two.sided")$p.value
p_loc_max[i,j] = p.adjust(p_loc_max[i,j], method = "fdr")
if(p_loc_max[i,j] < 0.025) { p_loc_shift[i]=TRUE }
}
}
}
}
}
## p_loc_shift if TRUE: y-shift in local maximum is significant
p_loc_max = as.data.frame(p_loc_max) ## data frame with all 10 only at shifting position adjusted p-value
p_loc_max$count = count_shift
proteins_local_shift = p_loc_max[which(p_loc_shift==TRUE),] ## proteins that shift in local maximum
dim(proteins_local_shift) ## 1471 proteins shift in local maximum
proteins_local_shift = cbind(rownames(proteins_local_shift), proteins_local_shift)
colnames(proteins_local_shift)[1] = "protein"
proteins_global_shift = cbind(rownames(proteins_global_shift), proteins_global_shift)
colnames(proteins_global_shift)[1] = "protein"
proteins_both_shift = merge(proteins_global_shift, proteins_local_shift, by = "protein") ## data sets merged by protein names (column "protein")
proteins_both_shift = proteins_both_shift[,-(11:36)]
dim(proteins_both_shift) ## 687 proteins shift in both global and local maximum
proteins_shifting = merge(proteins_global_shift, proteins_local_shift, by = "protein", all = TRUE) ## 1653 proteins have a shift in either local and/or global maximum
proteins_shifting = proteins_shifting[,-(12:36)]
proteins_shifting$glo_loc = ifelse(is.na(proteins_shifting[,11]), "only local", "global")
proteins_shifting$sign_ad[is.na(proteins_shifting$sign_ad)] = 0
proteins_shifting$count[is.na(proteins_shifting$count)] = 0
proteins_shifting$count_shift = ifelse(proteins_shifting$sign_ad == 1, (proteins_shifting$count +1), proteins_shifting$count)
#install.packages(dplyr) if necessary
library(dplyr)
proteins_only_global = anti_join(proteins_global_shift, proteins_both_shift, by = "protein")
nrow(proteins_only_global) ## 182 proteins only shift in global maximum
proteins_only_local = anti_join(proteins_local_shift, proteins_both_shift, by = "protein")
nrow(proteins_only_local) ## 784 proteins only shift in local maximum
# Chunk 20
## build overview data frame with possibly useful information of previous analysis
## vectors with numbers of maxima
numb_max_ctrl = rowSums(max_shift_ctrl!=0)+1 ## +1 -> plus global maximum
numb_max_rnase = rowSums(max_shift_rnase!=0)+1 ## +1 -> plus global maximum
## add to abs_max data frame
abs_max$max_ctrl = numb_max_ctrl
abs_max$max_rnase = numb_max_rnase
abs_max$left_right = ifelse(p_loc_shift == TRUE | abs_max$sign == TRUE, "shift", "no shift")
## create overview data frame from abs_max (col 1: global maximum fraction control, col 2: global maximum fraction RNase, col 3: TRUE if difference is at least 2 fractions, col 4: y-value of global maximum control, col 5: y-value of global maximum RNase, col 7: TRUE if significant y-shift in global maximum, col 8: number of maxima in Ctrl, col 9: number of maxima in RNase, col 10: shift if significant y-shift in global and/ or local maximum)
overview = cbind(abs_max[, c(1,2,3,4,5,7,8,9,10)], count_shift, p_loc_shift)
colnames(overview)[3] = "x.shift.glo" ## TRUE/FALSE significant x-shift in global maximum
colnames(overview)[6] = "y.shift.glo" ## TRUE/FALSE significant y-shift in global maximum
colnames(overview)[9] = "no.shift?" ## "shift" or "no shift"
colnames(overview)[10] = "count.x.shift.loc" ## how many local maxima shifts
colnames(overview)[11] = "y.shift.loc" ## TRUE/FALSE significant y-shift at least one local maximum
## adding additional columns indicating TRUE/ FALSE for global and local maximum shifts
overview$x.shift.loc = ifelse(overview$count.x.shift.loc != 0, TRUE, FALSE) ## significant x-shift in local maximum
overview$x.loc.glo = ifelse(overview$x.shift.glo == TRUE & overview$x.shift.loc == TRUE, TRUE, FALSE) ## TRUE/FALSE significant x-shift in global and/or local maximum
overview$y.loc.glo = ifelse(overview$y.shift.glo == TRUE & overview$y.shift.loc == TRUE, TRUE, FALSE) ## TRUE/FALSE significant y-shift in global and/or local maximum
## "right" if right shift in global maximum, "left" if left shift in global maximum, "shift" if shift only in local maximum, "no shift" if no shift
overview$left.right = ifelse(overview$x.shift.glo == TRUE & overview$global_max_ctrl - overview$global_max_rnase > 0, "left", "no shift")
overview$left.right = ifelse(overview$left.right != "left" & overview$x.shift.glo == TRUE & overview$global_max_ctrl - overview$global_max_rnase < 0, "right", overview$left.right)
overview$left.right = ifelse(overview$x.shift.glo == FALSE & overview$x.shift.loc == TRUE, "shift", overview$left.right)
overview$x.shift.frac.glo = overview$global_max_ctrl - overview$global_max_rnase ## difference in fraction of global maximum between control and RNase
## Compute correlation between Ctrl and RNase mean curve for each protein and store in cor_merge
cor_merge = vector()
for(i in 1:nrow(meanRepctrl)){
cor_merge[i] = cor(meanRepctrl[i,], meanRepRNase[i,])
}
overview$corr = cor_merge
cors_merge = vector()
## Compute euclidean distance between all values of mean Ctrl and RNase and store highest distance in eucli_merge
eucli_merge = vector()
eu = matrix(0,ncol = ncol(meanRepctrl), nrow = nrow(meanRepctrl))
for (i in 1:nrow(meanRepctrl)) {
for (j in 1:ncol(meanRepctrl)) {
eu[i,j] = sqrt((meanRepctrl[i,j] - meanRepRNase[i,j])^2)
}
}
eucli_merge = apply(eu,1, which.max)
overview$eucli = eucli_merge
## adding columns with protein names (as the rownames are lost when using the merge function in the next step) and number of shifting maxima
overview$protein = rownames(overview) ## Create column with protein names
overview$count.shift = ifelse(overview$x.shift.glo == TRUE, overview$count.x.shift.loc + 1, overview$count.x.shift.loc) ## number of shifting maxima
## preparation: data frames are merged between mitosis and interphase data set
merge_overview = merge(overview, overview_mi, by = "protein")
# Chunk 21
## k-means
## install and load packages
library(ggplot2)
library(ggforce)
library(concaveman)
## Create matrix for first clustering: difference in fraction of global maximum in Ctrl and RNase of interphase clustered with difference in fraction of global maximum in Ctrl and RNase of mitosis
kmeans_data1 = as.data.frame(cbind((merge_overview$global_max_rnase-merge_overview$global_max_ctrl), (merge_overview$m.global_max_rnase-merge_overview$m.global_max_ctrl)))
colnames(kmeans_data1) = c("x.shift.mitosis", "x.shift.interphase")
## elbow plot
set.seed(1)
wss1 = sapply(1:8,function(k) {
kmeans(x = kmeans_data1, centers = k)$tot.withinss
})
plot(1:8,wss1,type='b',pch=19,xlab="Number of clusters K", ylab="Total within-clusters sum of squares", main = "Elbow plot")
## elbow plot would suggest 4 clusters
## Perform k-means and visualize clusters
km.out1 = kmeans(kmeans_data1, centers = 4, nstart = 100)
kmeans_data1$cluster = as.character(km.out1$cluster)
cluster1 = ggplot(data = kmeans_data1, aes(x = x.shift.interphase, y = x.shift.mitosis, color = cluster)) +
geom_point() +
geom_mark_hull(expand = 0.01, aes(fill = cluster))
## compare clusters with right/left/shift/no shift column
table(kmeans_data1$cluster, merge_overview$left.right)
table(kmeans_data1$cluster, merge_overview$m.left.right)
km.out1$tot.withinss ## compute total wws
## adding number of shifts in maxima for mitosis and interphase as additional variables
kmeans_data2 = as.data.frame(cbind((merge_overview$global_max_rnase-merge_overview$global_max_ctrl), (merge_overview$m.global_max_rnase-merge_overview$m.global_max_ctrl), (merge_overview$count.shift), (merge_overview$m.count.shift)))
colnames(kmeans_data2) = c ("x.shift.interphase", "x.shift.mitosis", "count.shift.interphase", "count.shift.mitosis")
## elbow plot
set.seed(1)
wss2 = sapply(1:8,function(k) {
kmeans(x= kmeans_data2, centers = k)$tot.withinss
})
plot(1:8,wss2,type='b',pch=19,xlab="Number of clusters K",
ylab="Total within-clusters sum of squares", main = "Elbow plot")
## perform k-means and visualize clusters
km.out2 = kmeans(kmeans_data2, centers = 4, nstart = 100)
kmeans_data2$cluster = as.character(km.out2$cluster)
cluster2 = ggplot(data = kmeans_data2, aes(x = x.shift.interphase, y = x.shift.mitosis, colour = cluster)) +
geom_point() +
geom_mark_hull(expand = 0.01, aes(fill = cluster))
table(kmeans_data2$cluster, merge_overview$left.right)
table(kmeans_data2$cluster, merge_overview$m.left.right)
km.out2$tot.withinss
## no improvement in cluster structure due to additional variable (higher wws for first clustering approach)
# Chunk 22
## split data set into training (80 % of total data set) and test data set (20 %)
set.seed(1)
section = sample(1:nrow(merge_overview), 0.8 * nrow(merge_overview))
## training data set
train_data = merge_overview[section,]
train_data$x.shift.frac.glo = abs(train_data$x.shift.frac.glo)
## test data set
test_data = merge_overview[-section,]
test_data$x.shift.frac.glo = abs(test_data$x.shift.frac.glo)
## output variable: how many fractions does the global maximum of the protein shift? (x.shift.frac.glo)
## take multiple input variables: pearson correlation, highest euclidean distance of meanrepctrl and meanrepRnase
## pearson correlation
plot(x.shift.frac.glo ~ corr, data = train_data)
cor(train_data$x.shift.frac.glo, train_data$corr) ## -0.82 -> shows negative linear relation between the variables
corr_globfrac = lm(x.shift.frac.glo ~ corr, data = train_data)
summary(corr_globfrac) ## 68,06 % of total variance is explained by the model
regression_corr_globfrac = ggplot(train_data, aes(y=x.shift.frac.glo, x=corr)) + geom_point() + geom_smooth(method ="lm")
regression_corr_globfrac
## highest euclidean distance of meanrepctrl and meanrepRnase
plot(x.shift.frac.glo ~ eucli, data = train_data)
cor(train_data$x.shift.frac.glo, train_data$eucli)
eucli_globfrac = lm(x.shift.frac.glo ~ eucli, data = test_data)
summary(eucli_globfrac)
regression_eucli_globfrac = ggplot(train_data, aes(y=x.shift.frac.glo, x=eucli)) + geom_point() + geom_smooth(method ="lm")
regression_eucli_globfrac
## Pearson correlation is the most significant feature when predicting the x-shift of the global maximum compared to the highest euclidean distance as explanatory variable
## test conditions for linear regression: residuals are normally distributed and no correaltion between residuals and the explanatory variable
## residuals normally distributed?
hist(corr_globfrac$residuals, breaks=20)
qqnorm(corr_globfrac$residuals); qqline(corr_globfrac$residuals)
## correlation residuals x-values?
cor(train_data$corr, corr_globfrac$residuals) ## correlation is very small
plot(train_data$corr, corr_globfrac$residuals,pch=20)
## predict values of x shift in global maximum for test data set using corr as explanatory variable
prediction = predict(corr_globfrac, newdata = test_data)
## calculate root mean square error for model evaluation
n = nrow(test_data)
residuals = test_data$x.shift.frac.glo - prediction
rmse.test = sqrt(1/n*sum(residuals^2))
rmse.test
