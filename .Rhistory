knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache = TRUE)
anzahlcol = ncol(FullData)
FullData <- read.table("C:/Dokumente/Uni/FS 4/Data Analysis/RDeeP_HeLa_Interphase.csv", header = TRUE, row.names=1, sep = ";")
##forward slash or double back slash because "\" is an escape character
head(rownames(FullData),12)
head(colnames(FullData),12)
head(FullData)
anzahlcol = ncol(FullData)
colRep1ctrl = seq(1, 150, 6) ##alle Columns die rep1 ctrl enthalten
colRep2ctrl = seq(2, 150, 6) ##alle Columns die rep2 ctrl enthalten
colRep3ctrl = seq(3, 150, 6) ##alle Columns die rep3 ctrl enthalten
y = 1:25
meanRep1ctrl = sapply(FullData[,colRep1ctrl], mean) ##falsch!!! berechnet die mean von den Spalten und nicht für jedes Protein einzeln
meanRep2ctrl = sapply(FullData[,colRep2ctrl], mean)
meanRep3ctrl = sapply(FullData[,colRep3ctrl], mean)
plot(y, FullData[1,colRep1ctrl], col = "magenta") ##plot des Rep1 ctrl sample für protein 1
points(y, FullData[1,colRep2ctrl], col = "green") ##plot des Rep2 ctrl sample für protein 1
points(y, FullData[1,colRep3ctrl], col = "black") ##plot des Rep3 ctrl sample für protein 1
## Maximum für jedes bzw. ersten vierzig Proteine für Rep1 des ctrl sample und in welcher Fraktion die Maxima liegen
maxRep1ctrl = apply(FullData[1:40,colRep1ctrl],1,max)
for(i in 1:40){
for (j in 1:150){
if(FullData[i,j]==maxRep1ctrl[i]){
print(names(FullData)[j])
}
}
}
##Maximum der ersten Replicatreihe des Ctrl samples für das erste Protein
Rep1ctrl = FullData[1,colRep1ctrl] ## Werte für jede Fraktion des Rep1 beim ersten Protein
max(Rep1ctrl) ##Maximum davon (stimmt mit Angabe der Fraktion aus oben drüber liegendem Code überein :) )
##wie viele 0 gibt es in jeder Zeile?
rowSums(FullData==0)
x = which(rowSums(FullData==0)==150) ##welche Proteine haben nur 0 in der Zeile?
which(rowSums(FullData==0)==0) ##welche proteine haben gar keine 0?
anzahlcol = ncol(FullData)
colRep1ctrl = seq(1, 150, 6) ##alle Columns die rep1 ctrl enthalten
colRep2ctrl = seq(2, 150, 6) ##alle Columns die rep2 ctrl enthalten
colRep3ctrl = seq(3, 150, 6) ##alle Columns die rep3 ctrl enthalten
y = 1:25
meanRep1ctrl = sapply(FullData[,colRep1ctrl], mean) ##falsch!!! berechnet die mean von den Spalten und nicht für jedes Protein einzeln
meanRep2ctrl = sapply(FullData[,colRep2ctrl], mean)
meanRep3ctrl = sapply(FullData[,colRep3ctrl], mean)
plot(y, FullData[1,colRep1ctrl], col = "magenta") ##plot des Rep1 ctrl sample für protein 1
plot(y, FullData[1,colRep2ctrl], col = "green") ##plot des Rep2 ctrl sample für protein 1
plot(y, FullData[1,colRep3ctrl], col = "black") ##plot des Rep3 ctrl sample für protein 1
##points(x, y) wenn man die in einem Koordinatensystem haben will
## Maximum für jedes bzw. ersten vierzig Proteine für Rep1 des ctrl sample und in welcher Fraktion die Maxima liegen
maxRep1ctrl = apply(FullData[1:40,colRep1ctrl],1,max)
for(i in 1:40){
for (j in 1:150){
if(FullData[i,j]==maxRep1ctrl[i]){
print(names(FullData)[j])
}
}
}
##Maximum der ersten Replicatreihe des Ctrl samples für das erste Protein
Rep1ctrl = FullData[1,colRep1ctrl] ## Werte für jede Fraktion des Rep1 beim ersten Protein
max(Rep1ctrl) ##Maximum davon (stimmt mit Angabe der Fraktion aus oben drüber liegendem Code überein :) )
##wie viele 0 gibt es in jeder Zeile?
rowSums(FullData==0)
x = which(rowSums(FullData==0)==150) ##welche Proteine haben nur 0 in der Zeile?
which(rowSums(FullData==0)==0) ##welche proteine haben gar keine 0?
anzahlcol = ncol(FullData)
colRep1ctrl = seq(1, 150, 6) ##alle Columns die rep1 ctrl enthalten
colRep2ctrl = seq(2, 150, 6) ##alle Columns die rep2 ctrl enthalten
colRep3ctrl = seq(3, 150, 6) ##alle Columns die rep3 ctrl enthalten
colRep1rnase = seq(4, 150, 6)
colRep2rnase = seq(5, 150, 6)
colRep3rnase = seq(6, 150, 6)
y = 1:25
meanRep1ctrl = sapply(FullData[,colRep1ctrl], mean) ##falsch!!! berechnet die mean von den Spalten und nicht für jedes Protein einzeln
meanRep2ctrl = sapply(FullData[,colRep2ctrl], mean)
meanRep3ctrl = sapply(FullData[,colRep3ctrl], mean)
plot(y, FullData[1,colRep1ctrl], col = "magenta") ##plot des Rep1 ctrl sample für protein 1
plot(y, FullData[1,colRep2ctrl], col = "green") ##plot des Rep2 ctrl sample für protein 1
plot(y, FullData[1,colRep3ctrl], col = "black") ##plot des Rep3 ctrl sample für protein 1
##points(x, y) wenn man die in einem Koordinatensystem haben will
## Maximum für jedes bzw. ersten vierzig Proteine für Rep1 des ctrl sample und in welcher Fraktion die Maxima liegen
maxRep1ctrl = apply(FullData[1:40,colRep1ctrl],1,max)
for(i in 1:40){
for (j in 1:150){
if(FullData[i,j]==maxRep1ctrl[i]){
print(names(FullData)[j])
}
}
}
##Maximum der ersten Replicatreihe des Ctrl samples für das erste Protein
Rep1ctrl = FullData[1,colRep1ctrl] ## Werte für jede Fraktion des Rep1 beim ersten Protein
max(Rep1ctrl) ##Maximum davon (stimmt mit Angabe der Fraktion aus oben drüber liegendem Code überein :) )
##wie viele 0 gibt es in jeder Zeile?
rowSums(FullData==0)
x = which(rowSums(FullData==0)==150) ##welche Proteine haben nur 0 in der Zeile?
which(rowSums(FullData==0)==0) ##welche proteine haben gar keine 0?
echo =TRUE
anzahlcol = ncol(FullData)
colRep1ctrl = seq(1, 150, 6) ##alle Columns die rep1 ctrl enthalten
colRep2ctrl = seq(2, 150, 6) ##alle Columns die rep2 ctrl enthalten
colRep3ctrl = seq(3, 150, 6) ##alle Columns die rep3 ctrl enthalten
colRep1rnase = seq(4, 150, 6)
colRep2rnase = seq(5, 150, 6)
colRep3rnase = seq(6, 150, 6)
y = 1:25
meanRep1ctrl = sapply(FullData[,colRep1ctrl], mean) ##falsch!!! berechnet die mean von den Spalten und nicht für jedes Protein einzeln
meanRep2ctrl = sapply(FullData[,colRep2ctrl], mean)
meanRep3ctrl = sapply(FullData[,colRep3ctrl], mean)
plot(y, FullData[1,colRep1ctrl], col = "magenta") ##plot des Rep1 ctrl sample für protein 1
plot(y, FullData[1,colRep2ctrl], col = "green") ##plot des Rep2 ctrl sample für protein 1
plot(y, FullData[1,colRep3ctrl], col = "black") ##plot des Rep3 ctrl sample für protein 1
##points(x, y) wenn man die in einem Koordinatensystem haben will
## Maximum für jedes bzw. ersten vierzig Proteine für Rep1 des ctrl sample und in welcher Fraktion die Maxima liegen
maxRep1ctrl = apply(FullData[1:40,colRep1ctrl],1,max)
for(i in 1:40){
for (j in 1:150){
if(FullData[i,j]==maxRep1ctrl[i]){
print(names(FullData)[j])
}
}
}
##Maximum der ersten Replicatreihe des Ctrl samples für das erste Protein
Rep1ctrl = FullData[1,colRep1ctrl] ## Werte für jede Fraktion des Rep1 beim ersten Protein
max(Rep1ctrl) ##Maximum davon (stimmt mit Angabe der Fraktion aus oben drüber liegendem Code überein :) )
##wie viele 0 gibt es in jeder Zeile?
rowSums(FullData==0)
x = which(rowSums(FullData==0)==150) ##welche Proteine haben nur 0 in der Zeile?
which(rowSums(FullData==0)==0) ##welche proteine haben gar keine 0?
colRep1rnase
colRep2rnase
colRep3rnase
echo =TRUE##??
anzahlcol = ncol(FullData)
colRep1ctrl = seq(1, 150, 6) ##alle Columns die rep1 ctrl enthalten
colRep2ctrl = seq(2, 150, 6) ##alle Columns die rep2 ctrl enthalten
colRep3ctrl = seq(3, 150, 6) ##alle Columns die rep3 ctrl enthalten
colRep1rnase = seq(4, 150, 6) ##alle columns die rep1 rnase enthalten
colRep2rnase = seq(5, 150, 6) ##alle columns die rep2 rnase enthalten
colRep3rnase = seq(6, 150, 6) ##alle columns die rep3 rnase enthalten
y = 1:25
meanRep1ctrl = sapply(FullData[,colRep1ctrl], mean) ##falsch!!! berechnet die mean von den Spalten und nicht für jedes Protein einzeln
meanRep2ctrl = sapply(FullData[,colRep2ctrl], mean)
meanRep3ctrl = sapply(FullData[,colRep3ctrl], mean)
plot(y, FullData[1,colRep1ctrl], col = "magenta") ##plot des Rep1 ctrl sample für protein 1
plot(y, FullData[1,colRep2ctrl], col = "green") ##plot des Rep2 ctrl sample für protein 1
plot(y, FullData[1,colRep3ctrl], col = "black") ##plot des Rep3 ctrl sample für protein 1
##points(x, y) wenn man die in einem Koordinatensystem haben will
plot(y, FullData[1,colRep1rnase], col = "orange")
plot(y, FullData[1,colRep2rnase], col = "violet")
plot(y, FullData[1,colRep3rnase], col = "pink")
## Maximum für jedes bzw. ersten vierzig Proteine für Rep1 des ctrl sample und in welcher Fraktion die Maxima liegen
maxRep1ctrl = apply(FullData[1:40,colRep1ctrl],1,max)
for(i in 1:40){
for (j in 1:150){
if(FullData[i,j]==maxRep1ctrl[i]){
print(names(FullData)[j])
}
}
}
##Maximum der ersten Replicatreihe des Ctrl samples für das erste Protein
Rep1ctrl = FullData[1,colRep1ctrl] ## Werte für jede Fraktion des Rep1 beim ersten Protein
max(Rep1ctrl) ##Maximum davon (stimmt mit Angabe der Fraktion aus oben drüber liegendem Code überein :) )
##wie viele 0 gibt es in jeder Zeile?
rowSums(FullData==0)
x = which(rowSums(FullData==0)==150) ##welche Proteine haben nur 0 in der Zeile?
which(rowSums(FullData==0)==0) ##welche proteine haben gar keine 0?
meanFrac1Repctrl = apply(FullData[,1:3],1,mean) ##mean for each protein in triplicates of ctrl sample in fraction 1
n1 = FullData[1,1]-
meanFrac2Repctrl = apply(FullData[,7:9],1,mean) ##mean for each protein in triplicates of ctrl sample in fraction 2
meanFrac1Repctrl = apply(FullData[,1:3],1,mean) ##mean for each protein in triplicates of ctrl sample in fraction 1
meanFrac2Repctrl = apply(FullData[,7:9],1,mean) ##mean for each protein in triplicates of ctrl sample in fraction 2
meanFrac1Repctrl
n1 = FullData[1,1]-157910.133
n1
meanFrac1Repctrl = apply(FullData[,1:3],1,mean) ##mean for each protein in triplicates of ctrl sample in fraction 1
n1_1 = FullData[1,1]-157910.133
n1_2 = FullData[1,2]-157910.133
meanFrac2Repctrl = apply(FullData[,7:9],1,mean) ##mean for each protein in triplicates of ctrl sample in fraction 2
n1_2
n1_3 = FullData[1,3]-157910.133
n1_3
sdFrac1Repctrl = apply(FullData[,1:3],1,sd) ##sd for each protein in triplicates of ctrl sample in fraction 1
sdFrac1Repctrl
meanFrac1Repctrl = apply(FullData[,1:3],1,mean) ##mean for each protein in triplicates of ctrl sample in fraction 1
sdFrac1Repctrl = apply(FullData[,1:3],1,sd) ##sd for each protein in triplicates of ctrl sample in fraction 1
##Abweichungen vom mean für ctrl sample in fraction 1 für protein 1
n1_1 = FullData[1,1]-157910.133
n1_2 = FullData[1,2]-157910.133
n1_3 = FullData[1,3]-157910.133
##Z-Transformation
z1_1 = (FullData[1,1]-157910.133)/30636.8458
z1_2 = (FullData[1,2]-157910.133)/30636.8458
z1_3 = (FullData[1,3]-157910.133)/30636.8458
meanFrac2Repctrl = apply(FullData[,7:9],1,mean) ##mean for each protein in triplicates of ctrl sample in fraction 2
z1_1
z1_2
z1_3
scale_data = scale(FullData)
?scale
naData = FullData[FullData==0] = NA
naData
class(naData)
FullData[FullData==0] = NA
FullData
naData = (FullData[FullData==0] = NA)
FullData
FullData <- read.table("C:/Dokumente/Uni/FS 4/Data Analysis/RDeeP_HeLa_Interphase.csv", header = TRUE, row.names=1, sep = ";")
##forward slash or double back slash because "\" is an escape character
head(rownames(FullData),12)
head(colnames(FullData),12)
head(FullData)
naData = (FullData[FullData==0] = NA)
FullData
FullData <- read.table("C:/Dokumente/Uni/FS 4/Data Analysis/RDeeP_HeLa_Interphase.csv", header = TRUE, row.names=1, sep = ";")
##forward slash or double back slash because "\" is an escape character
head(rownames(FullData),12)
head(colnames(FullData),12)
head(FullData)
FullData
naData[FullData==0] = NA)
naData[FullData==0] = NA
naData
naData = data.frame(FullData)
naData
naData = data.frame(FullData)
naData[naData==0] = NA
FullData
naData
?apply
?apply
naData = data.frame(FullData)
naData[naData==0] = NA
nameanFrac1Repctrl = apply(naData[,1:3],1,mean, na.rm = TRUE)
nameanFrac1Repctrl
naData = data.frame(FullData)
naData[naData==0] = NA
nameanFrac1Repctrl = apply(naData[,1:3],1,mean, na.rm = TRUE)
nasdFrac1Repctrl = apply(naData[,1:3],1,sd, na.rm = TRUE)
naData = data.frame(FullData)
naData[naData==0] = NA
nameanFrac1Repctrl = apply(naData[,1:3],1,mean, na.rm = TRUE)
nasdFrac1Repctrl = apply(naData[,1:3],1,sd, na.rm = TRUE)
##Abweichungen vom mean für ctrl sample in fraction 1 für protein 1
n1_1 = naData[1,1]-157910.133
n1_2 = naData[1,2]-157910.133
n1_3 = naData[1,3]-157910.133
##Z-Transformation, aber dann ist Integral 1 oder? Wie wäre es mit Integral = 100 (Paper Maiwen)
z1_1 = (naData[1,1]-157910.133)/30636.8458
z1_2 = (naData[1,2]-157910.133)/30636.8458
z1_3 = (naData[1,3]-157910.133)/30636.8458
meanFrac2Repctrl = apply(FullData[,7:9],1,mean) ##mean for each protein in triplicates of ctrl sample in fraction 2
naData = data.frame(FullData)
naData[naData==0] = NA
nameanFrac1Repctrl = apply(naData[,1:3],1,mean, na.rm = TRUE)
nasdFrac1Repctrl = apply(naData[,1:3],1,sd, na.rm = TRUE)
##Abweichungen vom mean für ctrl sample in fraction 1 für protein 1
n1_1 = naData[1,1]-157910.133
n1_2 = naData[1,2]-157910.133
n1_3 = naData[1,3]-157910.133
##Z-Transformation, aber dann ist Integral 1 oder? Wie wäre es mit Integral = 100 (Paper Maiwen)
z1_1 = (naData[1,1]-157910.133)/30636.8458
z1_2 = (naData[1,2]-157910.133)/30636.8458
z1_3 = (naData[1,3]-157910.133)/30636.8458
nameanFrac2Repctrl = apply(naData[,7:9],1,mean) ##mean for each protein in triplicates of ctrl sample in fraction 2
nasdFrac1Repctrl
x
naData = naData[-2089,]
names(naData[2089])
names(naData[2089,])
rownames(naData[2089])
rownames(naData[2089,])
